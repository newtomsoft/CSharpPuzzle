using Puzzle;
using Shouldly;

namespace PuzzleTest;

public class SudokuSolverOrToolsTest
{
    [Fact]
    public void TestInvalidSudoku()
    {
        var puzzle = new int[][]
        {
            [5, 3, 1, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        };

        var solution = SudokuSolverOrTools.SolveSudoku(puzzle);

        solution.ShouldBe([]);
    }

    [Fact]
    public void Test9X9Sudoku()
    {
        var puzzle = new int[][]
        {
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        };

        var expectedSolution = new int[][]
        {
            [5, 3, 4, 6, 7, 8, 9, 1, 2],
            [6, 7, 2, 1, 9, 5, 3, 4, 8],
            [1, 9, 8, 3, 4, 2, 5, 6, 7],
            [8, 5, 9, 7, 6, 1, 4, 2, 3],
            [4, 2, 6, 8, 5, 3, 7, 9, 1],
            [7, 1, 3, 9, 2, 4, 8, 5, 6],
            [9, 6, 1, 5, 3, 7, 2, 8, 4],
            [2, 8, 7, 4, 1, 9, 6, 3, 5],
            [3, 4, 5, 2, 8, 6, 1, 7, 9]
        };

        var solution = SudokuSolverOrTools.SolveSudoku(puzzle);
        solution.ShouldBe(expectedSolution);
    }

    [Fact]
    public void Test16X16Sudoku()
    {
        var puzzle = new int[][]
        {
            [0, 0, 5, 0, 0, 0, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0],
            [9, 8, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 11, 0, 3, 6],
            [6, 0, 0, 13, 15, 0, 0, 1, 0, 3, 0, 0, 0, 7, 9, 14],
            [0, 1, 0, 16, 2, 8, 0, 7, 13, 0, 11, 9, 0, 0, 0, 0],
            [0, 0, 0, 6, 13, 0, 0, 0, 7, 12, 0, 0, 0, 11, 0, 0],
            [0, 0, 0, 9, 0, 2, 6, 0, 10, 11, 8, 0, 5, 0, 0, 0],
            [14, 0, 4, 0, 8, 11, 0, 0, 0, 0, 0, 5, 0, 16, 0, 0],
            [2, 0, 8, 7, 12, 0, 10, 5, 3, 0, 0, 4, 0, 0, 0, 0],
            [0, 0, 0, 0, 5, 0, 0, 11, 15, 10, 0, 7, 6, 9, 0, 4],
            [0, 0, 11, 0, 10, 0, 0, 0, 0, 0, 9, 8, 0, 14, 0, 5],
            [0, 0, 0, 5, 0, 13, 8, 14, 0, 16, 4, 0, 2, 0, 0, 0],
            [0, 0, 2, 0, 0, 0, 4, 12, 0, 0, 0, 3, 15, 0, 0, 0],
            [0, 0, 0, 0, 14, 10, 0, 2, 4, 0, 12, 15, 9, 0, 6, 0],
            [5, 2, 6, 0, 0, 0, 13, 0, 16, 0, 0, 10, 3, 0, 0, 7],
            [10, 12, 0, 8, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 15, 16],
            [0, 0, 0, 0, 0, 9, 0, 3, 0, 0, 0, 0, 0, 5, 0, 0]
        };

        var expectedSolution = new int[][]
        {
            [11, 7, 5, 15, 3, 6, 9, 10, 12, 4, 14, 16, 8, 2, 1, 13],
            [9, 8, 14, 2, 4, 12, 16, 13, 5, 7, 15, 1, 11, 10, 3, 6],
            [6, 4, 12, 13, 15, 5, 11, 1, 8, 3, 10, 2, 16, 7, 9, 14],
            [3, 1, 10, 16, 2, 8, 14, 7, 13, 6, 11, 9, 12, 4, 5, 15],
            [15, 5, 3, 6, 13, 16, 1, 9, 7, 12, 2, 14, 4, 11, 8, 10],
            [12, 16, 1, 9, 7, 2, 6, 4, 10, 11, 8, 13, 5, 15, 14, 3],
            [14, 13, 4, 10, 8, 11, 3, 15, 9, 1, 6, 5, 7, 16, 2, 12],
            [2, 11, 8, 7, 12, 14, 10, 5, 3, 15, 16, 4, 1, 6, 13, 9],
            [8, 14, 16, 3, 5, 1, 2, 11, 15, 10, 13, 7, 6, 9, 12, 4],
            [4, 6, 11, 12, 10, 3, 15, 16, 1, 2, 9, 8, 13, 14, 7, 5],
            [7, 9, 15, 5, 6, 13, 8, 14, 11, 16, 4, 12, 2, 3, 10, 1],
            [13, 10, 2, 1, 9, 7, 4, 12, 6, 14, 5, 3, 15, 8, 16, 11],
            [16, 3, 7, 11, 14, 10, 5, 2, 4, 13, 12, 15, 9, 1, 6, 8],
            [5, 2, 6, 14, 11, 15, 13, 8, 16, 9, 1, 10, 3, 12, 4, 7],
            [10, 12, 9, 8, 1, 4, 7, 6, 2, 5, 3, 11, 14, 13, 15, 16],
            [1, 15, 13, 4, 16, 9, 12, 3, 14, 8, 7, 6, 10, 5, 11, 2]
        };

        var solution = SudokuSolverOrTools.SolveSudoku(puzzle);
        solution.ShouldBe(expectedSolution);
    }
}
using Puzzle;
using Shouldly;

namespace PuzzleTest;

public class SudokuSolverOrToolsTest
{
    [Fact]
    public void TestInvalidSudoku()
    {
        var puzzle = new int[][]
        {
            [5, 3, 1, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        };

        var solution = SudokuSolverOrTools.SolveSudoku(puzzle);

        solution.ShouldBe([]);
    }

    [Fact]
    public void Test9X9Sudoku()
    {
        var puzzle = new int[][]
        {
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9]
        };

        var expectedSolution = new int[][]
        {
            [5, 3, 4, 6, 7, 8, 9, 1, 2],
            [6, 7, 2, 1, 9, 5, 3, 4, 8],
            [1, 9, 8, 3, 4, 2, 5, 6, 7],
            [8, 5, 9, 7, 6, 1, 4, 2, 3],
            [4, 2, 6, 8, 5, 3, 7, 9, 1],
            [7, 1, 3, 9, 2, 4, 8, 5, 6],
            [9, 6, 1, 5, 3, 7, 2, 8, 4],
            [2, 8, 7, 4, 1, 9, 6, 3, 5],
            [3, 4, 5, 2, 8, 6, 1, 7, 9]
        };

        var solution = SudokuSolverOrTools.SolveSudoku(puzzle);
        solution.ShouldBe(expectedSolution);
    }

    [Fact]
    public void Test16X16Sudoku()
    {
        var puzzle = new int[][]
        {
            [0, 0, 5, 0, 0, 0, 0, 0, 12, 0, 14, 0, 0, 0, 0, 0],
            [9, 8, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 11, 0, 3, 6],
            [6, 0, 0, 13, 15, 0, 0, 1, 0, 3, 0, 0, 0, 7, 9, 14],
            [0, 1, 0, 16, 2, 8, 0, 7, 13, 0, 11, 9, 0, 0, 0, 0],
            [0, 0, 0, 6, 13, 0, 0, 0, 7, 12, 0, 0, 0, 11, 0, 0],
            [0, 0, 0, 9, 0, 2, 6, 0, 10, 11, 8, 0, 5, 0, 0, 0],
            [14, 0, 4, 0, 8, 11, 0, 0, 0, 0, 0, 5, 0, 16, 0, 0],
            [2, 0, 8, 7, 12, 0, 10, 5, 3, 0, 0, 4, 0, 0, 0, 0],
            [0, 0, 0, 0, 5, 0, 0, 11, 15, 10, 0, 7, 6, 9, 0, 4],
            [0, 0, 11, 0, 10, 0, 0, 0, 0, 0, 9, 8, 0, 14, 0, 5],
            [0, 0, 0, 5, 0, 13, 8, 14, 0, 16, 4, 0, 2, 0, 0, 0],
            [0, 0, 2, 0, 0, 0, 4, 12, 0, 0, 0, 3, 15, 0, 0, 0],
            [0, 0, 0, 0, 14, 10, 0, 2, 4, 0, 12, 15, 9, 0, 6, 0],
            [5, 2, 6, 0, 0, 0, 13, 0, 16, 0, 0, 10, 3, 0, 0, 7],
            [10, 12, 0, 8, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 15, 16],
            [0, 0, 0, 0, 0, 9, 0, 3, 0, 0, 0, 0, 0, 5, 0, 0]
        };

        var expectedSolution = new int[][]
        {
            [11, 7, 5, 15, 3, 6, 9, 10, 12, 4, 14, 16, 8, 2, 1, 13],
            [9, 8, 14, 2, 4, 12, 16, 13, 5, 7, 15, 1, 11, 10, 3, 6],
            [6, 4, 12, 13, 15, 5, 11, 1, 8, 3, 10, 2, 16, 7, 9, 14],
            [3, 1, 10, 16, 2, 8, 14, 7, 13, 6, 11, 9, 12, 4, 5, 15],
            [15, 5, 3, 6, 13, 16, 1, 9, 7, 12, 2, 14, 4, 11, 8, 10],
            [12, 16, 1, 9, 7, 2, 6, 4, 10, 11, 8, 13, 5, 15, 14, 3],
            [14, 13, 4, 10, 8, 11, 3, 15, 9, 1, 6, 5, 7, 16, 2, 12],
            [2, 11, 8, 7, 12, 14, 10, 5, 3, 15, 16, 4, 1, 6, 13, 9],
            [8, 14, 16, 3, 5, 1, 2, 11, 15, 10, 13, 7, 6, 9, 12, 4],
            [4, 6, 11, 12, 10, 3, 15, 16, 1, 2, 9, 8, 13, 14, 7, 5],
            [7, 9, 15, 5, 6, 13, 8, 14, 11, 16, 4, 12, 2, 3, 10, 1],
            [13, 10, 2, 1, 9, 7, 4, 12, 6, 14, 5, 3, 15, 8, 16, 11],
            [16, 3, 7, 11, 14, 10, 5, 2, 4, 13, 12, 15, 9, 1, 6, 8],
            [5, 2, 6, 14, 11, 15, 13, 8, 16, 9, 1, 10, 3, 12, 4, 7],
            [10, 12, 9, 8, 1, 4, 7, 6, 2, 5, 3, 11, 14, 13, 15, 16],
            [1, 15, 13, 4, 16, 9, 12, 3, 14, 8, 7, 6, 10, 5, 11, 2]
        };

        var solution = SudokuSolverOrTools.SolveSudoku(puzzle);
        solution.ShouldBe(expectedSolution);
    }


    [Fact]
    public void Test49X49Sudoku()
    {
        var puzzle = new int[][]
        {
            [0, 15, 0, 0, 0, 11, 12, 0, 18, 22, 0, 0, 0, 23, 0, 0, 0, 9, 5, 6, 7, 25, 21, 16, 0],
            [0, 0, 0, 6, 0, 0, 16, 8, 0, 0, 11, 5, 15, 0, 0, 10, 2, 3, 24, 20, 0, 0, 12, 0, 19],
            [12, 18, 8, 14, 0, 15, 0, 0, 2, 0, 1, 0, 3, 24, 0, 0, 0, 4, 21, 16, 0, 0, 22, 11, 0],
            [0, 0, 0, 20, 16, 0, 0, 17, 0, 9, 10, 0, 0, 12, 22, 0, 0, 0, 0, 7, 3, 6, 23, 24, 0],
            [0, 0, 0, 0, 0, 7, 10, 0, 0, 19, 0, 6, 0, 0, 0, 11, 12, 0, 0, 22, 20, 0, 0, 8, 0],
            [0, 0, 0, 0, 9, 10, 0, 0, 0, 14, 24, 0, 0, 0, 0, 1, 13, 11, 0, 0, 0, 0, 25, 0, 23],
            [4, 0, 0, 1, 15, 23, 20, 0, 0, 0, 0, 8, 0, 10, 0, 0, 17, 0, 0, 18, 0, 11, 0, 6, 14],
            [0, 19, 10, 0, 21, 0, 0, 0, 0, 15, 7, 3, 0, 1, 14, 25, 5, 0, 8, 4, 2, 20, 0, 18, 24],
            [22, 0, 0, 5, 0, 0, 0, 0, 8, 24, 0, 0, 0, 16, 11, 0, 20, 0, 0, 0, 0, 4, 0, 17, 0],
            [0, 0, 0, 0, 0, 18, 0, 0, 5, 1, 13, 0, 23, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0],
            [16, 4, 17, 0, 13, 0, 7, 12, 11, 0, 0, 0, 0, 0, 0, 23, 0, 24, 0, 3, 0, 10, 0, 0, 25],
            [0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 17, 7, 0, 0, 0, 0, 0, 6, 18, 5, 19, 0, 2, 0, 20],
            [0, 11, 2, 24, 1, 0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 25, 0, 0, 0, 6, 7, 5, 4, 0],
            [20, 0, 23, 0, 5, 8, 22, 19, 0, 0, 0, 0, 0, 15, 25, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0],
            [25, 0, 0, 12, 0, 14, 0, 6, 0, 21, 0, 0, 0, 0, 0, 0, 11, 20, 19, 0, 17, 0, 8, 15, 16],
            [0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 24, 0, 18, 7, 21, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 25, 0, 2, 0, 0, 0, 0, 7, 0, 15, 16, 0, 0, 0, 3, 23, 0, 0, 0, 0, 17, 0, 0, 22],
            [14, 16, 0, 17, 10, 9, 3, 0, 6, 4, 23, 25, 0, 11, 21, 5, 0, 0, 0, 0, 24, 0, 15, 7, 0],
            [11, 22, 0, 15, 0, 17, 0, 0, 25, 0, 0, 14, 0, 19, 0, 0, 0, 0, 20, 9, 4, 16, 0, 0, 18],
            [21, 0, 6, 0, 0, 0, 0, 11, 24, 20, 0, 0, 0, 0, 10, 8, 0, 0, 0, 13, 23, 0, 0, 0, 0],
            [0, 10, 0, 0, 2, 24, 0, 0, 9, 23, 0, 0, 0, 7, 0, 22, 0, 0, 14, 21, 0, 0, 0, 0, 0],
            [0, 8, 4, 13, 11, 21, 0, 0, 0, 0, 16, 18, 0, 0, 24, 17, 0, 15, 0, 0, 14, 5, 0, 0, 0],
            [0, 14, 21, 0, 0, 2, 8, 4, 0, 0, 0, 1, 17, 0, 15, 0, 7, 0, 0, 24, 0, 13, 9, 23, 6],
            [6, 0, 7, 0, 0, 19, 5, 22, 12, 25, 0, 0, 21, 9, 3, 0, 0, 1, 11, 0, 0, 15, 0, 0, 0],
            [0, 1, 5, 9, 22, 6, 15, 18, 0, 0, 0, 11, 0, 0, 0, 20, 3, 0, 10, 2, 0, 0, 0, 25, 0]
        };

        var expectedSolution = new int[][]
        {
            [10, 15, 19, 3, 4, 11, 12, 24, 18, 22, 2, 20, 8, 23, 13, 14, 1, 9, 5, 6, 7, 25, 21, 16, 17],
            [7, 17, 22, 6, 25, 4, 16, 8, 23, 13, 11, 5, 15, 21, 9, 10, 2, 3, 24, 20, 1, 18, 12, 14, 19],
            [12, 18, 8, 14, 23, 15, 25, 20, 2, 6, 1, 17, 3, 24, 7, 13, 19, 4, 21, 16, 10, 9, 22, 11, 5],
            [2, 5, 11, 20, 16, 1, 14, 17, 21, 9, 10, 4, 19, 12, 22, 15, 18, 8, 25, 7, 3, 6, 23, 24, 13],
            [13, 9, 1, 21, 24, 7, 10, 5, 3, 19, 25, 6, 14, 18, 16, 11, 12, 17, 23, 22, 20, 2, 4, 8, 15],
            [18, 7, 3, 8, 9, 10, 4, 2, 16, 14, 24, 21, 5, 20, 17, 1, 13, 11, 6, 15, 12, 22, 25, 19, 23],
            [4, 13, 16, 1, 15, 23, 20, 25, 19, 12, 9, 8, 22, 10, 2, 24, 17, 21, 3, 18, 5, 11, 7, 6, 14],
            [17, 19, 10, 23, 21, 13, 11, 9, 22, 15, 7, 3, 6, 1, 14, 25, 5, 12, 8, 4, 2, 20, 16, 18, 24],
            [22, 2, 25, 5, 12, 3, 6, 21, 8, 24, 19, 15, 18, 16, 11, 9, 20, 23, 7, 14, 13, 4, 10, 17, 1],
            [24, 20, 14, 11, 6, 18, 17, 7, 5, 1, 13, 12, 23, 25, 4, 16, 10, 2, 22, 19, 15, 8, 3, 9, 21],
            [16, 4, 17, 19, 13, 5, 7, 12, 11, 2, 6, 9, 20, 8, 1, 23, 14, 24, 15, 3, 22, 10, 18, 21, 25],
            [8, 21, 15, 22, 14, 25, 24, 10, 13, 16, 17, 7, 11, 3, 12, 4, 9, 6, 18, 5, 19, 23, 2, 1, 20],
            [9, 11, 2, 24, 1, 20, 23, 15, 17, 18, 21, 10, 16, 14, 19, 12, 25, 22, 13, 8, 6, 7, 5, 4, 3],
            [20, 6, 23, 10, 5, 8, 22, 19, 4, 3, 18, 24, 2, 15, 25, 21, 16, 7, 1, 17, 9, 14, 13, 12, 11],
            [25, 3, 18, 12, 7, 14, 9, 6, 1, 21, 22, 23, 4, 13, 5, 2, 11, 20, 19, 10, 17, 24, 8, 15, 16],
            [5, 23, 9, 4, 19, 16, 2, 13, 15, 8, 3, 22, 24, 6, 18, 7, 21, 14, 17, 1, 25, 12, 11, 20, 10],
            [1, 25, 24, 2, 8, 12, 18, 14, 7, 10, 15, 16, 9, 5, 20, 3, 23, 19, 4, 11, 21, 17, 6, 13, 22],
            [14, 16, 20, 17, 10, 9, 3, 1, 6, 4, 23, 25, 13, 11, 21, 5, 22, 18, 2, 12, 24, 19, 15, 7, 8],
            [11, 22, 13, 15, 3, 17, 21, 23, 25, 5, 12, 14, 7, 19, 8, 6, 24, 10, 20, 9, 4, 16, 1, 2, 18],
            [21, 12, 6, 7, 18, 22, 19, 11, 24, 20, 4, 2, 1, 17, 10, 8, 15, 25, 16, 13, 23, 3, 14, 5, 9],
            [15, 10, 12, 18, 2, 24, 13, 16, 9, 23, 20, 19, 25, 7, 6, 22, 8, 5, 14, 21, 11, 1, 17, 3, 4],
            [23, 8, 4, 13, 11, 21, 1, 3, 20, 7, 16, 18, 10, 2, 24, 17, 6, 15, 9, 25, 14, 5, 19, 22, 12],
            [3, 14, 21, 25, 20, 2, 8, 4, 10, 11, 5, 1, 17, 22, 15, 19, 7, 16, 12, 24, 18, 13, 9, 23, 6],
            [6, 24, 7, 16, 17, 19, 5, 22, 12, 25, 14, 13, 21, 9, 3, 18, 4, 1, 11, 23, 8, 15, 20, 10, 2],
            [19, 1, 5, 9, 22, 6, 15, 18, 14, 17, 8, 11, 12, 4, 23, 20, 3, 13, 10, 2, 16, 21, 24, 25, 7]
        };

        var solution = SudokuSolverOrTools.SolveSudoku(puzzle);
        solution.ShouldBe(expectedSolution);
    }
}